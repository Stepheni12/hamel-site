<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Hamel&#39;s Blog</title>
<link>https://hamel.dev/notes/fasthtml/</link>
<atom:link href="https://hamel.dev/notes/fasthtml/index.xml" rel="self" type="application/rss+xml"/>
<description>Web development in FastHTML</description>
<image>
<url>https://user-images.githubusercontent.com/1483922/208359222-2b7e938e-27c4-4556-aacb-f5a81ce77b2d.png</url>
<title>Hamel&#39;s Blog</title>
<link>https://hamel.dev/notes/fasthtml/</link>
</image>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 10 Oct 2024 22:13:30 GMT</lastBuildDate>
<item>
  <title>Concurrency Foundations For FastHTML</title>
  <link>https://hamel.dev/notes/fasthtml/concurrency.html</link>
  <description><![CDATA[ 




<p><strong>Motivation</strong>: we often want to call LLMs in <a href="https://fastht.ml/">FastHTML</a> apps, and we don’t want to block the server on network calls to APIs.</p>
<p>This notebook documents of explorations I went on to better understand various types of concurrency that could be useful with FastHTML. Specifically, I wanted to investigate how to run certain kinds of tasks in the background without blocking the main process.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can <a href="https://github.com/hamelsmu/hamel-site/blob/master/notes/fasthtml/concurrency.ipynb">see this notebook here</a>.</p>
</div>
</div>
<section id="using-a-sql-database-as-a-queue" class="level2">
<h2 class="anchored" data-anchor-id="using-a-sql-database-as-a-queue">Using A SQL Database As A Queue</h2>
<p>We will use <a href="https://github.com/AnswerDotAI/fastlite">fastlite</a> as the interface to our SQL database.</p>
<section id="why" class="level3">
<h3 class="anchored" data-anchor-id="why">Why</h3>
<p>You are often already using a database for your web application, and if you need to process items in that database with some kind queue, its convenient to use the database itself!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hamel.dev/notes/fasthtml/hn.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot is from this <a href="https://news.ycombinator.com/item?id=27482402">HN Comment</a></figcaption>
</figure>
</div>
</section>
<section id="first-lets-define-our-queue-table" class="level3">
<h3 class="anchored" data-anchor-id="first-lets-define-our-queue-table">First, let’s define our queue table:</h3>
<div id="15087c2b" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastlite <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2">Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'queue.db'</span>).delete()</span>
<span id="cb1-3"></span>
<span id="cb1-4">db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Database(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'queue.db'</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> QueueItem:</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb1-8">    data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-9">    expire: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unix timestamp</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db.create(QueueItem, pk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span></code></pre></div>
</div>
</section>
<section id="now-lets-implement-the-enqueue-operation" class="level3">
<h3 class="anchored" data-anchor-id="now-lets-implement-the-enqueue-operation">Now, let’s implement the enqueue operation:</h3>
<div id="e6449b6d" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> enqueue(data): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> queue.insert(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data, expire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
</section>
<section id="for-the-dequeue-operation-well-implement-the-logic-described-in-the-comment" class="level3">
<h3 class="anchored" data-anchor-id="for-the-dequeue-operation-well-implement-the-logic-described-in-the-comment">For the dequeue operation, we’ll implement the logic described in the comment:</h3>
<div id="ff185083" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dequeue():</span>
<span id="cb3-3">    available_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue(where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expire = 0"</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">    </span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> available_items: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Queue is empty</span></span>
<span id="cb3-6">    </span>
<span id="cb3-7">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_items[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-8">    future_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(time.time()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 minutes from now</span></span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: UPDATE SET expire = future_time WHERE id = item.id AND expire = 0</span></span>
<span id="cb3-11">    updated_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.update(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>item.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, expire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>future_time)</span>
<span id="cb3-12">    </span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> updated_item.expire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> future_time: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> updated_item</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dequeue()</span></code></pre></div>
</div>
</section>
<section id="lets-see-it-in-action" class="level3">
<h3 class="anchored" data-anchor-id="lets-see-it-in-action">Let’s See It In Action!</h3>
<div id="b2c077ea" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enqueue some items</span></span>
<span id="cb4-2">enqueue(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Task 1"</span>)</span>
<span id="cb4-3">enqueue(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Task 2"</span>)</span>
<span id="cb4-4">enqueue(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Task 3"</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dequeue and process items</span></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb4-8">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dequeue()</span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue is empty"</span>)</span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-12">    </span>
<span id="cb4-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing Task 1
Processing Task 2
Processing Task 3
Queue is empty</code></pre>
</div>
</div>
</section>
</section>
<section id="using-threads-to-run-tasks-in-background" class="level2">
<h2 class="anchored" data-anchor-id="using-threads-to-run-tasks-in-background">Using Threads To Run Tasks In Background</h2>
<p>Next, we want perform proceessing on items from the queue, but do so in the background. We can use the <code>ThreadPoolExecutor</code> from Python’s <code>concurrent.futures</code> module to process items in a thread pool without blocking the main process. Here’s how we can modify our implementation to achieve this:</p>
<div id="fdce3dce" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> concurrent.futures <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ThreadPoolExecutor</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span></code></pre></div>
</div>
<div id="7e61d557" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_item(item):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate some work</span></span>
<span id="cb7-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-4">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulating work that takes 2 seconds</span></span>
<span id="cb7-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Finished processing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> worker():</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb7-9">        item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dequeue()</span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> item</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_queue_processor_background(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> background_task():</span>
<span id="cb7-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ThreadPoolExecutor(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_workers) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> executor:</span>
<span id="cb7-16">            futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> worker():</span>
<span id="cb7-18">                future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> executor.submit(process_item, item)</span>
<span id="cb7-19">                futures.append(future)</span>
<span id="cb7-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait for all tasks to complete</span></span>
<span id="cb7-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> future <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> futures: future.result()</span>
<span id="cb7-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue processing completed"</span>)</span>
<span id="cb7-23"></span>
<span id="cb7-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the background thread</span></span>
<span id="cb7-25">    thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>background_task)</span>
<span id="cb7-26">    thread.start()</span>
<span id="cb7-27">    </span>
<span id="cb7-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> thread  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the thread object in case we want to join it later</span></span></code></pre></div>
</div>
<div id="72d18aff" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enqueue some items</span></span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>): enqueue(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Task </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="33144308" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">processor_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_queue_processor_background()</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main process can continue immediately</span></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Main process continues..."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Main process continues...
Processing Task 1
Processing Task 2
Processing Task 3
Finished processing Task 1
Processing Task 4
Finished processing Task 3
Processing Task 5
Finished processing Task 2
Processing Task 6
Finished processing Task 4
Processing Task 7
Finished processing Task 5
Processing Task 8
Finished processing Task 6
Processing Task 9
Finished processing Task 7
Processing Task 10
Finished processing Task 8
Finished processing Task 9
Finished processing Task 10
Queue processing completed</code></pre>
</div>
</div>
</section>
<section id="async-processing" class="level2">
<h2 class="anchored" data-anchor-id="async-processing">Async Processing</h2>
<p>On a completely separate note, we can use async processing, which is very similar to threads. The main benefit of async over threads is that async is easier to debug (stacktrace, breakpoints, etc).</p>
<p>In the code below, we are calling openai library with asyncio. You will see that async is faster than sync in this case, because the majority of the work involves waiting for the response, which is perfect for async</p>
<div id="4bf27e57" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncOpenAI, OpenAI</span>
<span id="cb11-4"></span>
<span id="cb11-5">prompts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a joke"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's the capital of France?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Explain quantum computing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many planets are in the solar system?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the meaning of life?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many bytes are in a kilobyte?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When was the first iPhone released?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the capital of Canada?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the capital of Australia?"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the capital of the United Kingdom?"</span>]</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> async_process_prompt(client, prompt):</span>
<span id="cb11-8">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.chat.completions.create(</span>
<span id="cb11-9">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>,</span>
<span id="cb11-10">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}]</span>
<span id="cb11-11">    )</span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sync_process_prompt(client, prompt):</span>
<span id="cb11-15">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb11-16">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>,</span>
<span id="cb11-17">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}]</span>
<span id="cb11-18">    )</span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> async_main():</span>
<span id="cb11-22">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AsyncOpenAI()</span>
<span id="cb11-23">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-24">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [asyncio.create_task(async_process_prompt(client, prompt)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prompt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prompts]</span>
<span id="cb11-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can modify this code (see below) if you wish to just run this completely in the background.</span></span>
<span id="cb11-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.gather(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tasks) </span>
<span id="cb11-27">    end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-28">    async_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb11-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Async processing time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>async_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb11-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> async_time</span>
<span id="cb11-31"></span>
<span id="cb11-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sync_main():</span>
<span id="cb11-33">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb11-34">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-35">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sync_process_prompt(client, prompt) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prompt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prompts]</span>
<span id="cb11-36">    end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-37">    sync_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb11-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sync processing time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sync_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb11-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sync_time</span>
<span id="cb11-40"></span>
<span id="cb11-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run synchronous version</span></span>
<span id="cb11-42">sync_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sync_main()</span>
<span id="cb11-43"></span>
<span id="cb11-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run asynchronous version</span></span>
<span id="cb11-45">async_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> async_main()</span>
<span id="cb11-46"></span>
<span id="cb11-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare execution times</span></span>
<span id="cb11-48"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Synchronous execution time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sync_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb11-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Asynchronous execution time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>async_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb11-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Time saved with async: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sync_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> async_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb11-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Speedup factor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sync_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> async_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sync processing time: 11.22 seconds
Async processing time: 4.00 seconds

Synchronous execution time: 11.22 seconds
Asynchronous execution time: 4.00 seconds
Time saved with async: 7.22 seconds
Speedup factor: 2.80x</code></pre>
</div>
</div>
<p>In the code above, async is only as slow as the slowest single task. calling <code>await asyncio.gather(*tasks)</code> waits until all tasks are finished. <strong>However, if you just want to run tasks in the background, you can make the following change:</strong>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb13-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- tasks = [async_process_prompt(client, prompt) for prompt in prompts]</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- await asyncio.gather(*tasks)</span></span>
<span id="cb13-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ tasks = [asyncio.create_task(async_process_prompt(client, prompt)) for prompt in prompts]</span></span></code></pre></div>
<section id="limiting-async-tasks" class="level3">
<h3 class="anchored" data-anchor-id="limiting-async-tasks">Limiting Async Tasks</h3>
<p>To limit the number of tasks that can be running concurrently, we can use a <code>asyncio.Semaphore</code>. A semaphore allows us to control access to a shared resource, in this case, the number of concurrent tasks. <sup>1</sup> Here’s how it works:</p>
<div id="3c09596d" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a semaphore with the maximum number of concurrent tasks</span></span>
<span id="cb14-4">max_concurrent_tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-5">semaphore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asyncio.Semaphore(max_concurrent_tasks)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> limited_task(task_id):</span>
<span id="cb14-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> semaphore:</span>
<span id="cb14-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Starting task </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>task_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate some work</span></span>
<span id="cb14-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Finished task </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>task_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13"></span>
<span id="cb14-14">tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [limited_task(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span>
<span id="cb14-15">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.gather(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tasks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Starting task 0
Starting task 1
Starting task 2
Starting task 3
Starting task 4
Finished task 0
Finished task 1
Finished task 2
Finished task 3
Finished task 4
Starting task 5
Starting task 6
Starting task 7
Starting task 8
Starting task 9
Finished task 5
Finished task 6
Finished task 7
Finished task 8
Finished task 9</code></pre>
</div>
</div>
</section>
</section>
<section id="fasthtml-app-with-async" class="level2">
<h2 class="anchored" data-anchor-id="fasthtml-app-with-async">FastHTML App With Async</h2>
<p>Here’s a minimal FastHTML app that incorporates async. You have to run this in a notebook to try it!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can run FastHTML webapps in a Jupyter notebook! This is nice for learning, interactive development, and writing documentation (like we are doing here)! See <a href="https://docs.fastht.ml/tutorials/jupyter_and_fasthtml.html">these docs</a> for more info.</p>
</div>
</div>
<div id="4fbd4395" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.jupyter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span></code></pre></div>
</div>
<section id="define-the-server" class="level3">
<h3 class="anchored" data-anchor-id="define-the-server">Define the server</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The “I’m done” messages will be printed after this cell, because all of the console output is printed where the server is defined in a Jupyter notebook.</p>
</div>
</div>
<div id="d47e2b0a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#The "I'm done" messages will be printed after this cell</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> IN_JUPYTER:</span>
<span id="cb17-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.jupyter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JupyUvi, jupy_app, HTMX</span>
<span id="cb17-4">    app, rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jupy_app()</span>
<span id="cb17-5">    server <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JupyUvi(app) </span>
<span id="cb17-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-7">    app,rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fast_app()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>I'm done
I'm done</code></pre>
</div>
</div>
<div id="e32cc679" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> long_running_task():</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate a long-running task</span></span>
<span id="cb19-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm done"</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get():</span>
<span id="cb19-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async Task Demo"</span>,</span>
<span id="cb19-8">        Div(</span>
<span id="cb19-9">            Button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start Task"</span>, hx_post<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/start-task"</span>, hx_swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outerHTML"</span>),</span>
<span id="cb19-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task-button"</span></span>
<span id="cb19-11">        )</span>
<span id="cb19-12">    )</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/start-task"</span>)</span>
<span id="cb19-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> post():</span>
<span id="cb19-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These will run in the background since we aren't calling await.</span></span>
<span id="cb19-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There are multiple tasks, and asyncio.gather is one way of kicking them off</span></span>
<span id="cb19-18">    asyncio.gather(long_running_task(), long_running_task())</span>
<span id="cb19-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb19-20">        P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Task started! Check your console in 5 seconds."</span>),</span>
<span id="cb19-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task-button"</span></span>
<span id="cb19-22">    )</span></code></pre></div>
</div>
<div id="8d1fe8a0" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">HTMX()</span></code></pre></div>
</div>
<p><img src="https://hamel.dev/notes/fasthtml/ex_1.png" class="img-fluid"></p>
<div id="f365184b" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">server.stop()</span></code></pre></div>
</div>
</section>
</section>
<section id="async-openai" class="level2">
<h2 class="anchored" data-anchor-id="async-openai">Async OpenAI</h2>
<p>Let’s show a more realistic example by using OpenAI instead of the sleep. We’ll use the OpenAI API to generate a response, and then print it when it’s done. Here’s the updated code:</p>
<div id="ad60f9f7" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.jupyter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb22-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AsyncOpenAI</span></code></pre></div>
</div>
<div id="b2e6454d" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## The console output (from the background task) will be printed after this cell</span></span>
<span id="cb23-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> IN_JUPYTER:</span>
<span id="cb23-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.jupyter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JupyUvi, jupy_app, HTMX</span>
<span id="cb23-4">    app, rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jupy_app()</span>
<span id="cb23-5">    server <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JupyUvi(app) </span>
<span id="cb23-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb23-7">    app,rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fast_app()</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the AsyncOpenAI client</span></span>
<span id="cb23-10">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AsyncOpenAI()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OpenAI response: Sure, here's a longer joke for you:

Once upon a time, in a small village, there lived a man named Bob who was famous for being exceptionally lazy. His reputation preceded him, and yet people loved him for his good nature and sense of humor.

One day, the villagers decided they needed to put Bob’s laziness to the ultimate test, so they created a challenge. They declared that whoever could out-lazy Bob would win a prize of a lifetime supply of pies from the village bakery, which was known for making the most delicious pies in the entire region.

The day of the challenge arrived, and all the villagers gathered in the town square where it was to take place. Bob, who had been napping under a nearby tree, was informed of the event just minutes before it began. With a loud yawn and a lazy stretch, he sauntered over to the competition area.

The rules were simple: each contestant would be required to lie down on a comfy recliner and do absolutely nothing for as long as possible without falling asleep. The moment anyone closed their eyes for more than a few seconds, they’d be disqualified.

Many villagers, driven by the desire for endless pies, signed up to compete. As the event began, people lounged around, trying to keep themselves awake but still as lazy as possible. As expected, one by one, they succumbed to sleep as the hours wore on.

Bob, on the other hand, was a master at the art of doing nothing without crossing the line over into sleep. He reclined with expert relaxation, occasionally shifting to maximize comfort without breaking the rules. He even had a secret weapon — an internal mechanism that allowed him to sleep with his eyes open, a skill he had perfected over years of intensive laziness.

As the sun started to set, one contender named Charlie was left against Bob, determined not to lose. Charlie began talking to himself to stay awake, listing pies by flavor and inventing pie-based stories to keep his mind active.

Bob watched this with mild interest and then decided to take a different approach to his own battle against slumber. He started telling everyone jokes, without moving a muscle or showing any signs of exertion.

Finally, after hours and hours, with the stars twinkling overhead, Charlie could take it no longer. The anticipation of those delicious pies combined with Bob’s jokes was too much to handle. His eyes drooped, he let out a soft snore, and, alas, he was disqualified.

The village erupted in applause, and Bob, still lying down, was declared the laziest person and the winner of the lifetime pie supply. To this, Bob lazily smiled and said, “Looks like I’ll have a reason to take even more naps now — don’t want to over-exercise by walking to the bakery too often.”

And from that day on, Bob was not just the laziest man in the village; he was the happiest too, with perpetual pie-induced contentment as a bonus.</code></pre>
</div>
</div>
<div id="99c1eb2e" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> openai_task():</span>
<span id="cb25-2">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> client.chat.completions.create(</span>
<span id="cb25-3">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o"</span>,</span>
<span id="cb25-4">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me a long joke"</span>}]</span>
<span id="cb25-5">    )</span>
<span id="cb25-6">    joke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb25-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"OpenAI response: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>joke<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb25-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get():</span>
<span id="cb25-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Async OpenAI Demo"</span>,</span>
<span id="cb25-12">        Div(</span>
<span id="cb25-13">            Button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Get a Joke"</span>, hx_post<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/get-joke"</span>, hx_swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outerHTML"</span>),</span>
<span id="cb25-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joke-button"</span></span>
<span id="cb25-15">        )</span>
<span id="cb25-16">    )</span>
<span id="cb25-17"></span>
<span id="cb25-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/get-joke"</span>)</span>
<span id="cb25-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> post():</span>
<span id="cb25-20">    asyncio.create_task(openai_task())</span>
<span id="cb25-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb25-22">        P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joke request sent! Check your console in a minute."</span>),</span>
<span id="cb25-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joke-button"</span></span>
<span id="cb25-24">    )</span></code></pre></div>
</div>
<div id="8972e2c1" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">HTMX()</span></code></pre></div>
</div>
<p><img src="https://hamel.dev/notes/fasthtml/ex_2.png" class="img-fluid"></p>
<div id="88d8a9e1" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">server.stop()</span></code></pre></div>
</div>
</section>
<section id="threads-processes" class="level2">
<h2 class="anchored" data-anchor-id="threads-processes">Threads &amp; Processes</h2>
<p>Note: Async tasks can be started in the background with threads or processes. You can also spawn threads or processes from other threads or processes as well.</p>
<p>Let’s see the basic functionality of threads and processes in python.</p>
<div id="996f9dba" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.parallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> parallel</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x): time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb28-5">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parallel starts a new thread when threadpool=True.</span></span>
<span id="cb28-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(): parallel(f, a, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<section id="run-with-a-process" class="level3">
<h3 class="anchored" data-anchor-id="run-with-a-process">Run with a process</h3>
<p>We are starting a thread inside a new process so it runs in the background. Remember, <code>parallel</code> will execute <code>f</code> in a new thread.</p>
<p>It will print kinda wierd because of the threading and things completing at the same time.</p>
<div id="95e9c8b5" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> multiprocess <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Process</span>
<span id="cb29-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Process(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb29-3">p.start()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4287
6513






9</code></pre>
</div>
</div>
</section>
<section id="run-with-a-thread" class="level3">
<h3 class="anchored" data-anchor-id="run-with-a-thread">Run with a thread</h3>
<p>Instaed of starting a thread in the background with a process, we can also start it with another thread.</p>
<div id="cdc9e371" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Thread</span>
<span id="cb31-2">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb31-3">t.start()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>78
5
6
1
3
4
2

9</code></pre>
</div>
</div>
</section>
<section id="how-to-choose-threads-vs.-processes" class="level3">
<h3 class="anchored" data-anchor-id="how-to-choose-threads-vs.-processes">How to choose Threads vs.&nbsp;Processes</h3>
<p>See <a href="https://python.hamel.dev/concurrency/">my blog post</a>.</p>
<p>If your tasks involves network calls, consider using threads. For CPU intensive tasks, use processes.</p>
</section>
</section>
<section id="fastcore" class="level2">
<h2 class="anchored" data-anchor-id="fastcore">Fastcore</h2>
<p>Fastcore has goodies for threads and processes</p>
<section id="threaded-decorator" class="level3">
<h3 class="anchored" data-anchor-id="threaded-decorator"><code>@threaded</code> decorator</h3>
<p>This will make functions run in the background in a new thread or process.</p>
<div id="34c071a7" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.parallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threaded</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@threaded</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># casuses g to be threaded</span></span>
<span id="cb33-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(): parallel(f, a, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-5">    </span>
<span id="cb33-6">    </span>
<span id="cb33-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@threaded</span>(process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># casuses h to be run in a process</span></span>
<span id="cb33-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> h(): parallel(f, a, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="5cec8579" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">g()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>&lt;Thread(Thread-10 (g), started 6247886848)&gt;</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>3
1
2
4
8
6
7
5
9</code></pre>
</div>
</div>
<div id="865e155f" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">h()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>&lt;Process name='Process-3' pid=11059 parent=10524 started&gt;</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>357814
26






9</code></pre>
</div>
</div>
</section>
<section id="startthread" class="level3">
<h3 class="anchored" data-anchor-id="startthread"><code>startthread</code></h3>
<p>We can also start a thread by calling the <code>startthread</code> function.</p>
<div id="f6ec36a2" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.parallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> startthread</span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(): parallel(f, a, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-4">startthread(g)</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this will run right away in the main process, since the other code is running in the background</span></span>
<span id="cb40-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hello
1
3
4
8
6
7
2
5
9</code></pre>
</div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Thanks to Krisztian for the <a href="https://x.com/kk1694/status/1844336706058846496">suggestion</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://hamel.dev/notes/fasthtml/concurrency.html</guid>
  <pubDate>Thu, 10 Oct 2024 22:13:30 GMT</pubDate>
  <media:content url="https://user-images.githubusercontent.com/1483922/208359430-f55d7503-3a98-4875-a35c-16314c9439d0.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
